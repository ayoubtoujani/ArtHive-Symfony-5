{% extends 'feed.html.twig' %}

{% block title %}
     ArtHive | Publications
        
{% endblock %}

{% block search_bar %}
    <form action="{{ path('app_posts_search') }}" method="GET" class="search-bar">
        <input type="search" name="q" placeholder="Rechercher des Publications">
        <button type="submit"><i class="fa-solid fa-magnifying-glass"></i></button>
    </form>
{% endblock %}


{% block stylesheets %}
    {{ parent() }}
   <style>
        /* Styles for the publication list */
 .publication-container {
          display: flex;
                flex-wrap: wrap;
                justify-content: space-between; /* Ajustez l'espacement entre les produits */
                margin-top: 20px;
                padding: 20px;
                width: 110%; 
        }

        .publication-item {
           flex-basis: calc(33.33% - 25px); 
            margin-bottom: 40px; 
            margin-right: 20px;
            border: 1px solid #ccc;
            border-radius: 8px;
            background-color: #fff;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            transition: box-shadow 0.3s ease;
            position: relative; 
        }

        .publication-item:hover {
    box-shadow: 0 4px 8px rgba(4, 8, 236, 0.2);
    transform: translateY(1px); /* Move the publication item down by 2px */
    scale: 1.04; /* Slightly increase the size of the publication item */
    transition: 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);
}
        
.publication-title {
    font-size: 10px;
    font-weight: bold;
    color: #1877f2;
    margin-bottom: 5px;
    padding: 10px;
}

        .publication-date {
    font-size: 14px;
    color: #555;
    margin-bottom: 5px;
    padding: 10px;
}

 .publication-image {
            width: 100%;
            height: 300px;
            border-radius: 8px 8px 0 0;
        }

        h1 {
            color: #4848ed; /* Text color in blue */
            text-align: center; /* Horizontal centering */
            margin-top: 0; /* Remove default margin to align with the rest of the content */
            margin-bottom: 20px; /* Bottom spacing to separate from the following content */
            font-size: 50px; /* Larger font size */
        }
           .content {
                width:190%;
                float: right;
            }
            /* Affiche la description du produit lorsque survolée */
            .produit-item:hover .produit-description {
                display: block;
            }

            .icon-container {
            display: flex; /* Utilisation de Flexbox */
            align-items: center; /* Alignement vertical centré */
            justify-content: center; /* Alignement horizontal centré */
        }

         .icon-container i {
           margin-right: 10px; /* Espacement entre les icônes */
             }

          

    
        .modal {
            display: none; /* Hidden by default */
            position: fixed; /* Stay in place */
            z-index: 9999; /* Sit on top */
            padding-top: 100px; /* Location of the box */
            left: 0;
            top: 0;
            width: 100%; /* Full width */
            height: 100%; /* Full height */
            overflow: auto; /* Enable scroll if needed */
            background-color: rgba(0,0,0,0.7); /* Black w/ opacity */
        }

        .modal-content {
            margin: auto;
            display: block;
            max-width: 80%; /* Max width */
            max-height: 80%; /* Max height */
        }
        .modal-content-comment {
            position: relative;
            margin: auto;
            width: 80%;
            max-width: 600px;
            background-color: #fefefe;
            padding: 20px;
            border-radius: 8px;
        }

        .modal-image {
            max-width: 50%; /* Set maximum width */
            max-height: 80vh; /* Set maximum height as 80% of viewport height */
            display: block;
            margin: 0 auto; /* Center the image horizontally */
        }

        .close {
            position: absolute;
            top: 20px;
            right: 20px;
            color: #fff;
            font-size: 24px;
            cursor: pointer;
        }
        .publication-title {
                display: none;
                position: absolute;
                top: 88%; /* Positionne le rectangle de description au milieu verticalement */
                left: 50%; /* Positionne le rectangle de description au milieu horizontalement */
                transform: translate(-50%, -50%); /* Centre le rectangle de description */
                width: 100%; /* Largeur ajustée pour le rectangle de description */
                background-color: rgba(255, 255, 255, 0.8); /* Fond blanc avec opacité */
                padding: 10px; /* Espacement autour du texte de description */
                box-sizing: border-box; /* Inclut le padding dans la largeur et la hauteur */
                text-align: center; /* Centrer le texte horizontalement */
        }
        .publication-item:hover .publication-title {
                display: block;
        }
                .icon-container {
            display: flex; /* Utilisation de Flexbox */
            align-items: center; /* Alignement vertical centré */
            justify-content: center; /* Alignement horizontal centré */
        }
        .bookmarkBtn {
  width: 130px;
  height: 40px;
  border-radius: 40px;
  border: none;
  background-color: rgb(255, 255, 255);
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  transition-duration: .3s;
  overflow: hidden;
  box-shadow: 10px 10px 10px rgba(0, 0, 0, 0.062);
}

.IconContainer {
  width: 30px;
  height: 30px;
  background-color: rgb(103, 74, 228);
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  overflow: hidden;
  z-index: 2;
  transition-duration: .3s;
}

.icon {
  border-radius: 1px;
}

.text {
  height: 100%;
  width: 90px;
  display: flex;
  align-items: center;
  justify-content: center;
  color: rgb(26, 26, 26);
  z-index: 1;
  transition-duration: .3s;
  font-size: 1.04em;
  font-weight: 600;
}

.bookmarkBtn:hover .IconContainer {
  width: 120px;
  border-radius: 40px;
  transition-duration: .3s;
}

.bookmarkBtn:hover .text {
  transform: translate(10px);
  width: 0;
  font-size: 0;
  transition-duration: .3s;
}

.bookmarkBtn:active {
  transform: scale(0.95);
  transition-duration: .3s;
}
.Btn {
  width: 140px;
  height: 35px;
  display: flex;
  align-items: center;
  justify-content: flex-start;
  border: none;
  border-radius: 5px;
  overflow: hidden;
  box-shadow: 5px 5px 10px rgba(0, 0, 0, 0.089);
  cursor: pointer;
  background-color: transparent;
}

.leftContainer {
  width: 60%;
  height: 100%;
  background-color: #0060ff;
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 8px;
}

.leftContainer .like {
  color: white;
  font-weight: 600;
}

.likeCount {
  width: 40%;
  height: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
  color: #0060ff;
  font-weight: 600;
  position: relative;
  background-color: white;
}

.likeCount::before {
  height: 8px;
  width: 8px;
  position: absolute;
  content: "";
  background-color: rgb(255, 255, 255);
  transform: rotate(45deg);
  left: -4px;
}

.Btn:hover .leftContainer {
  background-color: #1d4292;
}

.Btn:active .leftContainer {
  background-color: #072b7a;
}

.Btn:active .leftContainer svg {
  transform: scale(1.15);
  transform-origin: top;
}

body {
            background-image: url('https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTSivdg9sGuIwUPz6n3Cx2W0FYXTOqRkUO4HEkoqd6oAFESCcTrQxGoK_7kN9JXI8SZkbs&usqp=CAU');
            background-size: cover;
            background-repeat: no-repeat;
            background-attachment: fixed;
        }
    </style>
{% endblock %}

{% block content %}

    <h1>“Life is art. Art is life. I never separate it.” – Ai Weiwei
</h1>
   <div class="publication-container">
    {% for publication in publications %}
        <div class="publication-item" >
            <!-- Publication Image and Title -->
            <div style="position: relative;">
                <img class="publication-image" src="{{ asset('images/' ~ publication.getUrlFile()) }}" alt="Image de la publication">
                <div>
                    <p class="publication-title"style = "font-size:13px;">{{ publication.getContenuPublication() }}</p>
                                        <div class="icon-container">
                        <i class="fa-solid fa-search-plus zoom-icon" style="color: #3642dd;"></i>
                    </div>
                </div>
            </div>
            <!-- User Information -->
            <div style="display: flex; align-items: center; ">
                 <img class="profile-image" src="{{ asset('images/' ~ publication.getUser().getPhoto()) }}" style="width: 55px; height: 55px; margin-left: 10px; border-radius: 50%;">
                 <div style="margin-left: 10px;">
                  <p class="username-label">
                   <a href="#" style="font-weight: bold; text-decoration: none; color: inherit;">{{ publication.getUser().getNomUser() }} {{ publication.getUser().getPrenomUser() }}</a>
                     </p>
                     <p class="publication-date">{{ publication.getDCreationPublication()|time_ago }}</p>
                </div>
            </div>
           <!-- Like and Comment Buttons -->
<div style="display: flex; justify-content: center; margin-top: 10px; margin-bottom: 10px;">
    <!-- Like Button -->
   <a href="{{ path('add_like', {'id': publication.getIdPublication()}) }}" data-publication-id="{{ publication.getIdPublication() }}" style="margin-right: 10px; width: 140px; height: 35px; display: flex; align-items: center; justify-content: center; ">
<button class="Btn" onclick="toggleLike(this)">
  <span class="leftContainer">
    <svg xmlns="http://www.w3.org/2000/svg" height="1em" viewBox="0 0 512 512" fill="#fff"><path d="M313.4 32.9c26 5.2 42.9 30.5 37.7 56.5l-2.3 11.4c-5.3 26.7-15.1 52.1-28.8 75.2H464c26.5 0 48 21.5 48 48c0 18.5-10.5 34.6-25.9 42.6C497 275.4 504 288.9 504 304c0 23.4-16.8 42.9-38.9 47.1c4.4 7.3 6.9 15.8 6.9 24.9c0 21.3-13.9 39.4-33.1 45.6c.7 3.3 1.1 6.8 1.1 10.4c0 26.5-21.5 48-48 48H294.5c-19 0-37.5-5.6-53.3-16.1l-38.5-25.7C176 420.4 160 390.4 160 358.3V320 272 247.1c0-29.2 13.3-56.7 36-75l7.4-5.9c26.5-21.2 44.6-51 51.2-84.2l2.3-11.4c5.2-26 30.5-42.9 56.5-37.7zM32 192H96c17.7 0 32 14.3 32 32V448c0 17.7-14.3 32-32 32H32c-17.7 0-32-14.3-32-32V224c0-17.7 14.3-32 32-32z"></path></svg>
    <span class="like">Like</span>
  </span>
  <span class="likeCount">
    {{ publication.countReactions() }}
  </span>
</button>
</a>

    <!-- Comment Button -->
    <button class="bookmarkBtn " data-publication-id="{{ publication.getIdPublication() }}" style="margin-left: 10px; width: 130px; height: 40px;">
        <span class="IconContainer">
            <svg fill="white" viewBox="0 0 512 512" height="1em">
                <!-- Comment SVG path -->
                <path d="M123.6 391.3c12.9-9.4 29.6-11.8 44.6-6.4c26.5 9.6 56.2 15.1 87.8 15.1c124.7 0 208-80.5 208-160s-83.3-160-208-160S48 160.5 48 240c0 32 12.4 62.8 35.7 89.2c8.6 9.7 12.8 22.5 11.8 35.5c-1.4 18.1-5.7 34.7-11.3 49.4c17-7.9 31.1-16.7 39.4-22.7zM21.2 431.9c1.8-2.7 3.5-5.4 5.1-8.1c10-16.6 19.5-38.4 21.4-62.9C17.7 326.8 0 285.1 0 240C0 125.1 114.6 32 256 32s256 93.1 256 208s-114.6 208-256 208c-37.1 0-72.3-6.4-104.1-17.9c-11.9 8.7-31.3 20.6-54.3 30.6c-15.1 6.6-32.3 12.6-50.1 16.1c-.8 .2-1.6 .3-2.4 .5c-4.4 .8-8.7 1.5-13.2 1.9c-.2 0-.5 .1-.7 .1c-5.1 .5-10.2 .8-15.3 .8c-6.5 0-12.3-3.9-14.8-9.9c-2.5-6-1.1-12.8 3.4-17.4c-4.1-4.2 7.8-8.7 11.3-13.5c1.7-2.3 3.3-4.6 4.8-6.9c.1-.2 .2-.3 .3-.5z"></path>
            </svg>
        </span>
        <p class="text">Comments</p>
    </button>
</div>


        </div>
    {% endfor %}
</div>


    <!-- Modal popup -->
    <div id="myModal" class="modal">
        <span class="close">&times;</span>
        <div class="modal-content">
            <img id="modal-img" class="modal-image">
        </div>
    </div>
     <div id="addPostModal" class="modal">
        <span class="close">&times;</span>
        <div class="modal-content">
           {% include 'publications/addPost.html.twig' %}
        </div>
    </div>
  <script>
document.addEventListener("DOMContentLoaded", function() {
    const zoomIcons = document.querySelectorAll('.zoom-icon');
    const modal = document.getElementById('myModal');
    const modalImg = document.getElementById("modal-img");
    const closeModal = document.getElementsByClassName("close")[0];
     const createPostButton = document.getElementById("create-post-button"); // Select the create post button
    const addPostModal = document.getElementById("addPostModal"); // Select the add post modal
   const commentIcons = document.querySelectorAll('.bookmarkBtn');
   
       
commentIcons.forEach(icon => {
    icon.addEventListener('click', function() {
        const publicationId = icon.dataset.publicationId;
        window.location.href = "/showComments/" + publicationId;
    });
});

    zoomIcons.forEach(icon => {
        icon.addEventListener('click', function() {
            const publicationItem = this.closest('.publication-item');
            const publicationImage = publicationItem.querySelector('.publication-image').src;

            modal.style.display = "block";
            modalImg.src = publicationImage;
        });
    });
      
       function openCreatePostModal() {
        const addPostModal = document.getElementById('addPostModal');
        addPostModal.style.display = "block";
    }
     if (createPostButton) {
        createPostButton.addEventListener('click', openCreatePostModal);
    }

    // Close the modal when clicked outside the image or on the close button
    window.onclick = function(event) {
        if (event.target === modal) {
            modal.style.display = "none";
        }
    }

    closeModal.onclick = function() {
        modal.style.display = "none";
    }

    
const addPostCloseBtn = addPostModal.querySelector('.close');
    addPostCloseBtn.addEventListener('click', function() {
        addPostModal.style.display = "none";
    });   
});
 function toggleLike(button) {
    var likeCount = button.querySelector('.likeCount');
    var likeText = button.querySelector('.like');
    var count = parseInt(likeCount.textContent);

    if (likeText.textContent === 'Like') {
      count++;
      likeText.textContent = 'Unlike';
    } else {
      count--;
      likeText.textContent = 'Like';
    }

    likeCount.textContent = count;
  }
  </script>    
{% endblock %}